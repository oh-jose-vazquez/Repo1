//var db = 'staging_performance'
//var slackChannel = '#app-staging-alerts'
var db = 'production_performance'
var slackChannel = '#app-production-alerts'

var rp = 'autogen'

var measurement = 'provider_requests'

var groupBy = []

var period = 5m

var every = 1m

var crit = 5

var name = 'ASE AAS Response Code 401'

var whereFilter = lambda: ("application" == 'ase') AND ("service" == 'AAS') AND ("status_code" == '401')

var message = 'ASE AAS Response Code 401
TaskName: {{.TaskName}}
Count: {{ index .Fields "count_sum" }}
Level: {{.Level}}
Time: {{.Time}}'

var idVar = name

var idTag = 'alertID'

var levelTag = 'level'

var messageField = 'message'

var durationField = 'duration'

var outputDB = 'chronograf'

var outputRP = 'autogen'

var outputMeasurement = 'alerts'

var triggerType = 'threshold'

var data = stream
    |from()
        .database(db)
        .retentionPolicy(rp)
        .measurement(measurement)
        .groupBy(groupBy)
        .where(whereFilter)
    |window()
        .period(period)
        .every(every)
        .align()
    |sum('count')
        .as('count_sum')

var trigger = data
    |alert()
        .crit(lambda: "count_sum" >= crit)
        .message(message)
        .id(idVar)
        .idTag(idTag)
        .levelTag(levelTag)
        .messageField(messageField)
        .durationField(durationField)
        .stateChangesOnly()
        .noRecoveries()
        .slack()
        .channel(slackChannel)

trigger
    |eval(lambda: int("count_sum"))
        .as('count_sum')
        .keep()
    |influxDBOut()
        .create()
        .database(outputDB)
        .retentionPolicy(outputRP)
        .measurement(outputMeasurement)
        .tag('alertName', name)
        .tag('triggerType', triggerType)

trigger
    |httpOut('output')
